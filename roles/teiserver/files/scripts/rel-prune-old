#!/bin/bash

set -e -u -o pipefail

if [[ $(id -u) != 0 ]]; then
    gum style --faint "Elevating to run as root"
    exec sudo "$0" "$@"
fi

# Flags parsing
. /usr/local/lib/bash/shflags

DEFINE_integer 'days' 16 'Versions older then how many days to remove' 'd'
DEFINE_boolean 'skip_confirmation' false 'Skip confirmation before removing' 'y'
DEFINE_boolean 'dry_run' false 'Just print versions to delete and exit' 'n'

FLAGS_HELP="USAGE: $0 [flags]

Prune old teiserver releases. This script will delete all releases of the
teiserver that are untagged and older then configured time.
"
FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

if [[ $FLAGS_days -lt 0 ]]; then
    gum style --bold 'Days argument must be non-negative' >&2
    exit 1
fi

# Main script
. /usr/local/lib/bash/tei-bash-lib

cd $_TEI_INSTALL_DIR

function versions_to_drop {
    local time="$1"
    while read -r version date; do
        if [[ "$date" < "$time" ]]; then
            echo "$version"
        fi
    done < <(_tei_list_versions \
        | grep -E ',""$' \
        | cut -d, -f1,2 \
        | tr -d '"' | tr , ' ')
}

(
gum spin --title "Waiting for deploy lock held by $(cat $_TEI_DEPLOY_LOCK)..." -- flock 200
echo "$(logname):$$" > $_TEI_DEPLOY_LOCK

TO_DROP="$(versions_to_drop "$(date -d "$FLAGS_days days ago" -u +"%Y-%m-%dT%H:%M:%SZ")")"

if [[ -z "$TO_DROP" ]]; then
    echo "No versions to drop"
    exit 0
fi

if [[ $FLAGS_skip_confirmation == $FLAGS_FALSE ]] \
  && ! gum confirm "Are to sure you want to drop $(echo "$TO_DROP" | wc -l) old versions?"; then
    exit 0
fi

for version in $TO_DROP; do
    if [[ $FLAGS_dry_run == $FLAGS_FALSE ]]; then
        rm -r "ver-$version"
    fi
    echo "$version"
done

) 200>>$_TEI_DEPLOY_LOCK
