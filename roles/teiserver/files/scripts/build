#!/bin/bash

set -e -u -o pipefail

if [[ $(id -u) != 0 ]]; then
    gum style --faint "Elevating to run as root"
    exec sudo "$0" "$@"
fi

# Flags parsing
. /usr/local/lib/bash/shflags

DEFINE_string 'repo' '/home/deploy/teiserver-repo' 'Path to the repo to build' 'r'

FLAGS_HELP="USAGE: $0 [flags]

Builds the teiserver image from the specified repo and tags it as latest.
"
FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# Main script

REPO="$(realpath -e "${FLAGS_repo}")"
if [[ ! -d "$REPO" ]]; then
  gum style --bold "Repo $REPO does not exist"
  exit 1
fi

if [[ ! -f "$REPO/config/prod.secret.exs" ]]; then
  gum style --bold "Repo $REPO does not contain config/prod.secret.exs, did you forget to run tei-apply-prod-data?"
  exit 1
fi

REPO_COMMIT=$(git -C "$REPO" rev-parse HEAD)
if output=$(git -C "$REPO" status --porcelain) && [ -z "$output" ]; then
  REPO_DIRTY=false
else
  REPO_DIRTY=true
fi

IMAGE_ID_FILE="$(mktemp)"
podman build --iidfile "$IMAGE_ID_FILE" -f /home/deploy/teiserver.Dockerfile "$REPO"
IMAGE_ID=$(cat "$IMAGE_ID_FILE" | cut -d: -f2)
rm "$IMAGE_ID_FILE"

VER="${IMAGE_ID::10}"
VER_DIR="/opt/teiserver/ver-$VER"

DEPLOY_LOCK="/run/lock/teiserver-deploy.lock"
(
gum spin --title "Waiting for deploy lock held by $(cat $DEPLOY_LOCK)..." -- flock 200
echo "$(logname):$$" > $DEPLOY_LOCK

if [[ -d "$VER_DIR" ]]; then
  gum style --bold "Same version $VER is already installed"
else
  rm -rf "$VER_DIR.tmp"
  podman run --rm -v /opt:/opt "$IMAGE_ID" cp -r /app "$VER_DIR.tmp"
  chown -R teiserver:teiserver "$VER_DIR.tmp"
  cat <<EOF > "$VER_DIR.tmp/build-info.json"
{
  "repo": "$REPO",
  "commit": "$REPO_COMMIT",
  "dirty": "$REPO_DIRTY",
  "actor": "$(logname)",
  "time": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "image": "$IMAGE_ID"
}
EOF
  mv "$VER_DIR.tmp" "$VER_DIR"
  gum style --bold "Done building version $VER, build info:"
  cat "$VER_DIR/build-info.json" | jq
fi

gum style --bold "Tagging the version $VER as latest"
ln -sfT "ver-$VER" /opt/teiserver/latest

) 200>>$DEPLOY_LOCK
